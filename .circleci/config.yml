# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1
  codecov: codecov/codecov@3.2.4

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: continuumio/miniconda3
    # working_directory: /root/project
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run: |
          # update conda and create env
          conda update -y conda
          conda create -n cheminf python=3.10
          source activate base 
          conda activate cheminf
          # install AQME, ROBERT and their dependencies
          python -m pip install --upgrade pip          
          conda install -y -c conda-forge openbabel=3.1.1
          conda install -y -c conda-forge xtb=6.7.1
          conda install -y -c conda-forge libgfortran=14.2.0
          conda install -y -c conda-forge glib
          pip install weasyprint
          conda install -y -c conda-forge gtk3
          conda install -y -c conda-forge pango
          pip install aqme==1.7.3
          pip install .
          pip install scikit-learn-intelex==2025.2.0
          # uninstall robert to avoid codecov issues (only running from the robert folder)
          pip uninstall -y robert
          # install and run pytest
          pip install pytest
          pip install pytest-cov
          # the format of the codecov report has to be scpecified or it doesn't create for some reason
          python -m pytest -v --cov=robert --cov-report=xml
          rm -r /tmp/*
          cp -r * /tmp
      - persist_to_workspace:
          root: /tmp
          paths:
            - coverage.xml
            - robert

  # the codecov orb doesn't work with the miniconda docker, so the coverage report
  # needs to be stored and loaded in a new job using a python docker
  codecov-coverage:
    docker:
      - image: cimg/python:3.10
    steps:
      - attach_workspace:
          at: /tmp
      # this checkout step is necessary to avoid an issue in which codecov thinks the report is empty
      - checkout
      - codecov/upload:
          file: /tmp/coverage.xml
          token: CODECOV_TOKEN
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - codecov-coverage:
          requires:
            - build-and-test
